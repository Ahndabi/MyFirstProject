using System.Collections;
using System.Collections.Generic;
using UnityEngine;


//========================================
//##		디자인 패턴 SingleTon		##
//========================================
/*
	싱글톤 패턴 :
	오직 한 개의 클래스 인스턴스만을 갖도록 보장 (관리자)
	이에 대한 전역적인 접근점을 제공

	싱글톤은 매니저로 만듦 (GameManager 스크립트)

	ex. 퀘스트 매니저를 만들었는데 퀘스트 매니저가 여러명이야
	ex. 플레이어 클래스에 인벤토리를 두 개 만들었다? 인벤토리는 하나여야지.
	이런 게임 시스템 관련된 기능은 단 하나만 있어야 하지.

	구현 :
	1. 전역에서 접근 가능한 인스턴스의 주소를 갖기 위해
	데이터 영역 메모리 공간을 활용 (정적변수) - 정적변수는 데이터영역에 하나만 만들 수 있음(?)
	2. 정적변수를 활용하여 캡슐화를 진행
	3. 생성자의 접근권한을 외부에서 생성할 수 없도록 제한 - 생성자를 private로 만들면 new를 통해 인스턴스를 만들 수 없음
		- 그러면 아예 인스턴스 자체를 못만드는 거 아니야? - 그래서 클래스 내부에서 public인 인스턴스를 만드는 함수를 구현
	    - 클래스 내부에서 인스턴스를 만드는 거임. 
	4. Instance 속성를 통해 인스턴스에 접근할 수 있도록 함
	5. instance 변수는 단 하나만 있도록 유지

	장점 :
	1. 하나뿐인 존재로 주요 클래스, 관리자의 역할을 함
	2. 전역적 접근으로 참조에 필요한 작업이 없이 빠른접근가능
	3. 인스턴스들이 싱글톤을 통하여 데이터를 공유하기 쉬워짐
		- ex. 몬스터를 잡고 골드를 올려줄 때, 골드 인스턴스를 바로 참조해서 올려줌. 상점에서 쓰일 골드도 바로 골드 인스턴스 참조 ㄱ
			  막 여러 인스턴스 만들고 그걸 공유하도록 하는 게 아니라 이렇게 바로바로 참조 가능

	단점 :
	1. 싱글톤이 너무 많은 책임을 짊어지는 경우를 주의해야함	  - 싱글톤이 넘 쉬워서 싱글톤을 너무 많이 쓰는 고야 ㅜ
	2. 싱글톤의 남발로 전역접근이 많아지게 되는 경우, 참조한 코드 결합도가 높아짐
		- 플레이어도, 상점도, 몬스터도 골드에 접근 가능... 만약 골드소스를 바꿨을 때 이 셋 다 영향을 미치는 거임
		- 그래서 싱글톤은 관리자에만 사용하는 것이 좋음
		- 플레이어가 지금까지 잡은 몬스터의 수, 지금까지 플레이한 시간 등! 이런거!
	3. 싱글톤의 데이터를 공유할 경우 데이터 변조에 주의해야함
		- 여러 곳에서 참조하다보니 순서대로 잘 처리 해야함. 대입으로 할 때 조심.
		- 그래서 대입연산보다는 +, -로 하는 게 더 좋음! (500골드를 600골드로X,  500골드+100골드 O)
*/

public class SingleTon
{
	private static SingleTon instance;

	public static SingleTon Instance
	{
		get
		{
			if (instance == null)			// 인스턴스가 없으면
				instance = new SingleTon();	// 하나 만들어

			return instance;				// 그리고 그 만든 인스턴스를 반환함
		}
	}

	private SingleTon() { }		// 생성자를 private으로 선언해서 새로운 인스턴스를 외부에서 못만들도록 (여러개 만들 수 없게)
								// 근데 이렇게 되면 외부에서 아예 못만드니까 SingleTon 클래스 안에서 인스턴스를 하나만 만들 수 있는 함수를 만듦
								// 그럼 외부에서 이 싱클톤을 쓸 때 인스턴스를 하나만 만들 수 있자낭! (처음으로 싱클톤을 쓸 때 이때부터 단일객체만 유지)

	// 인벤1이 인벤토리를 하나 만들어달라고 함. 이땐 아예 인벤토리가 없으니까 처음 하나 만들어서 줌.
	// 인벤2도 인벤토리 하나 만들어달래. 이땐 인벤1에게 줬던 인벤토리가 하나 있으니까, 이미 있던 거를 인벤2에게 줌.
	// 결국 다 똑같은 인벤토리를 주는 거야.
}